{"version":3,"sources":["hooks/http.hook.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","actions/index.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","reducers/index.js","store/index.js","index.js"],"names":["useHttp","request","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","HeroesListItem","_ref","elementClassName","name","description","element","onDelete","_jsxs","className","children","_jsx","src","alt","style","objectFit","onClick","type","Spinner","role","HeroesList","filteredHeroes","heroesLoadingStatus","useSelector","state","dispatch","useDispatch","useEffect","then","data","payload","catch","id","console","log","heroDeleted","err","elements","arr","CSSTransition","timeout","classNames","map","props","TransitionGroup","component","HeroesAddForm","heroName","setHeroName","useState","heroDescr","setHeroDescr","heroElement","setHeroElement","filters","filtersLoadingStatus","onSubmit","preventDefault","newHero","uuidv4","hero","JSON","stringify","res","htmlFor","required","placeholder","value","onChange","target","height","renderFilters","label","HeroesFilters","activeFilter","filtersFetched","btnClass","active","App","initialState","heroes","reducer","action","filter","item","newCreatedHeroList","newHeroList","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","React","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.aa881bbb.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nexport const useHttp = () => {\n  // const [process, setProcess] = useState('waiting');\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\n      // setProcess('loading');\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        // setProcess('error');\n        throw e;\n      }\n    },\n    []\n  );\n\n  // const clearError = useCallback(() => {\n  // setProcess('loading');\n  // }, []);\n\n  return {\n    request,\n    // clearError,\n    // process,\n    // setProcess\n  };\n};\n","const HeroesListItem = ({ name, description, element, onDelete }) => {\n  let elementClassName;\n\n  switch (element) {\n    case \"fire\":\n      elementClassName = \"bg-danger bg-gradient\";\n      break;\n    case \"water\":\n      elementClassName = \"bg-primary bg-gradient\";\n      break;\n    case \"wind\":\n      elementClassName = \"bg-success bg-gradient\";\n      break;\n    case \"earth\":\n      elementClassName = \"bg-secondary bg-gradient\";\n      break;\n    default:\n      elementClassName = \"bg-warning bg-gradient\";\n  }\n\n  return (\n    <li className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n      <img\n        src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\"\n        className=\"img-fluid w-25 d-inline\"\n        alt=\"unknown hero\"\n        style={{ objectFit: \"cover\" }}\n      />\n      <div className=\"card-body\">\n        <h3 className=\"card-title\">{name}</h3>\n        <p className=\"card-text\">{description}</p>\n      </div>\n      <span\n        onClick={onDelete}\n        className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\"\n      >\n        <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n      </span>\n    </li>\n  );\n};\n\nexport default HeroesListItem;\n","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import { useHttp } from \"../../hooks/http.hook\";\nimport { useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { heroesFetching, heroesFetched, heroesFetchingError, heroDeleted } from \"../../actions\";\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport \"./heroesList.scss\";\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst HeroesList = () => {\n  const { filteredHeroes, heroesLoadingStatus } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { request } = useHttp();\n\n  useEffect(() => {\n    dispatch(heroesFetching());\n    request(\"http://localhost:3001/heroes\")\n      .then((data) => dispatch(heroesFetched(data)))\n      .catch(() => dispatch(heroesFetchingError()));\n\n    // eslint-disable-next-line\n  }, []);\n\n  // Функция берет id и по нему удаляет ненужного персонажа из store\n  // ТОЛЬКО если запрос на удаление прошел успешно\n  // Отслеживайте цепочку действий actions => reducers\n  const onDelete = useCallback(\n    (id) => {\n      // Удаление персонажа по его id\n      request(`http://localhost:3001/heroes/${id}`, \"DELETE\")\n        .then((data) => console.log(data, \"Deleted\"))\n        .then(dispatch(heroDeleted(id)))\n        .catch((err) => console.log(err));\n      // eslint-disable-next-line\n    },\n    [request]\n  );\n\n  if (heroesLoadingStatus === \"loading\") {\n    return <Spinner />;\n  } else if (heroesLoadingStatus === \"error\") {\n    return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>;\n  }\n\n  const renderHeroesList = (arr) => {\n    if (arr.length === 0) {\n      return (\n        <CSSTransition timeout={0} classNames=\"hero\">\n          <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n        </CSSTransition>\n      );\n    }\n\n    return arr.map(({ id, ...props }) => {\n      return (\n        <CSSTransition key={id} timeout={500} classNames=\"hero\">\n          <HeroesListItem {...props} onDelete={() => onDelete(id)} />\n        </CSSTransition>\n      );\n    });\n  };\n\n  const elements = renderHeroesList(filteredHeroes);\n  return <TransitionGroup component=\"ul\">{elements}</TransitionGroup>;\n};\n\nexport default HeroesList;\n","export const heroesFetching = () => {\n  return {\n    type: \"HEROES_FETCHING\",\n  };\n};\n\nexport const heroesFetched = (heroes) => {\n  return {\n    type: \"HEROES_FETCHED\",\n    payload: heroes,\n  };\n};\n\nexport const heroesFetchingError = () => {\n  return {\n    type: \"HEROES_FETCHING_ERROR\",\n  };\n};\n\nexport const filtersFetching = () => {\n  return {\n    type: \"FILTERS_FETCHING\",\n  };\n};\n\nexport const filtersFetched = (filters) => {\n  return {\n    type: \"FILTERS_FETCHED\",\n    payload: filters,\n  };\n};\n\nexport const filtersFetchingError = () => {\n  return {\n    type: \"FILTERS_FETCHING_ERROR\",\n  };\n};\n\nexport const activeFilterChanged = (filter) => {\n  return {\n    type: \"ACTIVE_FILTER_CHANGED\",\n    payload: filter,\n  };\n};\n\nexport const heroCreated = (hero) => {\n  return {\n    type: \"HERO_CREATED\",\n    payload: hero,\n  };\n};\n\nexport const heroDeleted = (id) => {\n  return {\n    type: \"HERO_DELETED\",\n    payload: id,\n  };\n};\n","// Задача для этого компонента:\n// Реализовать создание нового героя с введенными данными. Он должен попадать\n// в общее состояние и отображаться в списке + фильтроваться\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\n// Усложненная задача:\n// Персонаж создается и в файле json при помощи метода POST\n// Дополнительно:\n// Элементы <option></option> желательно сформировать на базе\n// данных из фильтров\n\nimport { useHttp } from \"../../hooks/http.hook\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { heroCreated } from \"../../actions\";\n\nconst HeroesAddForm = () => {\n  // Состояния для контроля формы\n  const [heroName, setHeroName] = useState(\"\");\n  const [heroDescr, setHeroDescr] = useState(\"\");\n  const [heroElement, setHeroElement] = useState(\"\");\n\n  const { filters, filtersLoadingStatus } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { request } = useHttp();\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n    // Можно сделать и одинаковые названия состояний,\n    // хотел показать вам чуть нагляднее\n    // Генерация id через библиотеку\n    const newHero = {\n      id: uuidv4(),\n      name: heroName,\n      description: heroDescr,\n      element: heroElement,\n    };\n\n    // Отправляем данные на сервер в формате JSON\n    // ТОЛЬКО если запрос успешен - отправляем персонажа в store\n    request(\"http://localhost:3001/heroes\", \"POST\", JSON.stringify(newHero))\n      .then((res) => console.log(res, \"Отправка успешна\"))\n      .then(dispatch(heroCreated(newHero)))\n      .catch((err) => console.log(err));\n\n    // Очищаем форму после отправки\n    setHeroName(\"\");\n    setHeroDescr(\"\");\n    setHeroElement(\"\");\n  };\n\n  const renderFilters = (filters, status) => {\n    if (status === \"loading\") {\n      return <option>Загрузка элементов</option>;\n    } else if (status === \"error\") {\n      return <option>Ошибка загрузки</option>;\n    }\n\n    // Если фильтры есть, то рендерим их\n    if (filters && filters.length > 0) {\n      return filters.map(({ name, label }) => {\n        // Один из фильтров нам тут не нужен\n        // eslint-disable-next-line\n        if (name === \"all\") return;\n\n        return (\n          <option key={name} value={name}>\n            {label}\n          </option>\n        );\n      });\n    }\n  };\n\n  return (\n    <form className=\"border p-4 shadow-lg rounded\" onSubmit={onSubmitHandler}>\n      <div className=\"mb-3\">\n        <label htmlFor=\"name\" className=\"form-label fs-4\">\n          Имя нового героя\n        </label>\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          className=\"form-control\"\n          id=\"name\"\n          placeholder=\"Как меня зовут?\"\n          value={heroName}\n          onChange={(e) => setHeroName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"text\" className=\"form-label fs-4\">\n          Описание\n        </label>\n        <textarea\n          required\n          name=\"text\"\n          className=\"form-control\"\n          id=\"text\"\n          placeholder=\"Что я умею?\"\n          style={{ height: \"130px\" }}\n          value={heroDescr}\n          onChange={(e) => setHeroDescr(e.target.value)}\n        />\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"element\" className=\"form-label\">\n          Выбрать элемент героя\n        </label>\n        <select\n          required\n          className=\"form-select\"\n          id=\"element\"\n          name=\"element\"\n          value={heroElement}\n          onChange={(e) => setHeroElement(e.target.value)}\n        >\n          <option value=\"\">Я владею элементом...</option>\n          {renderFilters(filters, filtersLoadingStatus)}\n        </select>\n      </div>\n\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Создать\n      </button>\n    </form>\n  );\n};\n\nexport default HeroesAddForm;\n","import { useHttp } from \"../../hooks/http.hook\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport classNames from \"classnames\";\n\nimport { filtersFetching, filtersFetched, filtersFetchingError, activeFilterChanged } from \"../../actions\";\nimport Spinner from \"../spinner/Spinner\";\n\n// Задача для этого компонента:\n// Фильтры должны формироваться на основании загруженных данных\n// Фильтры должны отображать только нужных героев при выборе\n// Активный фильтр имеет класс active\n\nconst HeroesFilters = () => {\n  const { filters, filtersLoadingStatus, activeFilter } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { request } = useHttp();\n\n  // Запрос на сервер для получения фильтров и последовательной смены состояния\n  useEffect(() => {\n    dispatch(filtersFetching());\n    request(\"http://localhost:3001/filters\")\n      .then((data) => dispatch(filtersFetched(data)))\n      .catch(() => dispatch(filtersFetchingError()));\n\n    // eslint-disable-next-line\n  }, []);\n\n  if (filtersLoadingStatus === \"loading\") {\n    return <Spinner />;\n  } else if (filtersLoadingStatus === \"error\") {\n    return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>;\n  }\n\n  const renderFilters = (arr) => {\n    if (arr.length === 0) {\n      return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>;\n    }\n\n    // Данные в json-файле я расширил классами и текстом\n    return arr.map(({ name, className, label }) => {\n      // Используем библиотеку classnames и формируем классы динамически\n      const btnClass = classNames(\"btn\", className, {\n        active: name === activeFilter,\n      });\n\n      return (\n        <button key={name} id={name} className={btnClass} onClick={() => dispatch(activeFilterChanged(name))}>\n          {label}\n        </button>\n      );\n    });\n  };\n\n  const elements = renderFilters(filters);\n\n  return (\n    <div className=\"card shadow-lg mt-4\">\n      <div className=\"card-body\">\n        <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n        <div className=\"btn-group\">{elements}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default HeroesFilters;\n","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","const initialState = {\n  heroes: [],\n  heroesLoadingStatus: \"idle\",\n  filters: [],\n  filtersLoadingStatus: \"idle\",\n  activeFilter: \"all\",\n  filteredHeroes: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"HEROES_FETCHING\":\n      return {\n        ...state,\n        heroesLoadingStatus: \"loading\",\n      };\n    case \"HEROES_FETCHED\":\n      return {\n        ...state,\n        heroes: action.payload,\n        // ЭТО МОЖНО СДЕЛАТЬ И ПО ДРУГОМУ\n        // Я специально показываю вариант с действиями тут, но более правильный вариант\n        // будет показан в следующем уроке\n        filteredHeroes:\n          state.activeFilter === \"all\"\n            ? action.payload\n            : action.payload.filter((item) => item.element === state.activeFilter),\n        heroesLoadingStatus: \"idle\",\n      };\n    case \"HEROES_FETCHING_ERROR\":\n      return {\n        ...state,\n        heroesLoadingStatus: \"error\",\n      };\n    case \"FILTERS_FETCHING\":\n      return {\n        ...state,\n        filtersLoadingStatus: \"loading\",\n      };\n    case \"FILTERS_FETCHED\":\n      return {\n        ...state,\n        filters: action.payload,\n        filtersLoadingStatus: \"idle\",\n      };\n    case \"FILTERS_FETCHING_ERROR\":\n      return {\n        ...state,\n        filtersLoadingStatus: \"error\",\n      };\n    case \"ACTIVE_FILTER_CHANGED\":\n      return {\n        ...state,\n        activeFilter: action.payload,\n        filteredHeroes:\n          action.payload === \"all\" ? state.heroes : state.heroes.filter((item) => item.element === action.payload),\n      };\n    // Самая сложная часть - это показывать новые элементы по фильтрам\n    // при создании или удалении\n    case \"HERO_CREATED\":\n      // Формируем новый массив\n      let newCreatedHeroList = [...state.heroes, action.payload];\n      return {\n        ...state,\n        heroes: newCreatedHeroList,\n        // Фильтруем новые данные по фильтру, который сейчас применяется\n        filteredHeroes:\n          state.activeFilter === \"all\"\n            ? newCreatedHeroList\n            : newCreatedHeroList.filter((item) => item.element === state.activeFilter),\n      };\n    case \"HERO_DELETED\":\n      // Формируем новый массив\n      const newHeroList = state.heroes.filter((item) => item.id !== action.payload);\n      return {\n        ...state,\n        heroes: newHeroList,\n        // Фильтруем новые данные по фильтру, который сейчас применяется\n        filteredHeroes:\n          state.activeFilter === \"all\"\n            ? newHeroList\n            : newHeroList.filter((item) => item.element === state.activeFilter),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./components/app/App\";\nimport store from \"./store\";\n\nimport \"./styles/index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}